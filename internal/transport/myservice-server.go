// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"service/internal/interfaces"
)

type serverMyService struct {
	svc  interfaces.MyService
	info MyServiceInfo
}

type MiddlewareSetMyService interface {
	Wrap(m MiddlewareMyService)
	WrapInfo(m MiddlewareMyServiceInfo)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerMyService(svc interfaces.MyService) *serverMyService {
	return &serverMyService{
		info: svc.Info,
		svc:  svc,
	}
}

func (srv *serverMyService) Wrap(m MiddlewareMyService) {
	srv.svc = m(srv.svc)
	srv.info = srv.svc.Info
}

func (srv *serverMyService) Info(ctx context.Context, id string) (err error) {
	return srv.info(ctx, id)
}

func (srv *serverMyService) WrapInfo(m MiddlewareMyServiceInfo) {
	srv.info = m(srv.info)
}

func (srv *serverMyService) WithTrace() {
	srv.Wrap(traceMiddlewareMyService)
}

func (srv *serverMyService) WithMetrics() {
	srv.Wrap(metricsMiddlewareMyService)
}

func (srv *serverMyService) WithLog() {
	srv.Wrap(loggerMiddlewareMyService())
}
