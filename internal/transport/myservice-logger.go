// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/rs/zerolog/log"
	"github.com/seniorGolang/dumper/viewer"
	"service/internal/interfaces"
	"time"
)

type loggerMyService struct {
	next interfaces.MyService
}

func loggerMiddlewareMyService() MiddlewareMyService {
	return func(next interfaces.MyService) interfaces.MyService {
		return &loggerMyService{next: next}
	}
}

func (m loggerMyService) Info(ctx context.Context, id string) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "MyService").Str("method", "info").Logger()
	defer func(begin time.Time) {
		fields := map[string]interface{}{
			"request":  viewer.Sprintf("%+v", requestMyServiceInfo{Id: id}),
			"response": viewer.Sprintf("%+v", responseMyServiceInfo{}),
			"took":     time.Since(begin).String(),
		}
		if err != nil {
			logger.Error().Err(err).Fields(fields).Msg("call info")
			return
		}
		logger.Info().Fields(fields).Msg("call info")
	}(time.Now())
	return m.next.Info(ctx, id)
}
